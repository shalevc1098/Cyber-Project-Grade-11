#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Mar 21, 2021 03:14:50 PM +0200  platform: Windows NT

import sys
import socket
import threading
import importlib
sys.path.insert(0, 'C:/Users/Shalev/Desktop/תיקיות/Python Project/GUIS/games/tictactoe/queue')
import tictactoe_queue

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import hub_support

canbreak = False

def on_closing(my_socket, root):
    global canbreak
    canbreak = True
    my_socket.shutdown(socket.SHUT_RDWR)
    my_socket.close()
    root.destroy()

def vp_start_gui(my_socket, username):
    '''Starting point when module is the main routine.'''
    global val, w, root, canbreak
    root = tk.Tk()
    top = Hub (my_socket, username, root)
    hub_support.init(root, top)
    root.protocol("WM_DELETE_WINDOW", lambda: on_closing(my_socket, root))
    while not canbreak and not tictactoe_queue.get_can_close():
        root.update()

def open_tictactoe_queue(top, username, my_socket):
    global canbreak
    top.withdraw()
    importlib.reload(tictactoe_queue)
    tictactoe_queue.vp_start_gui(my_socket, username, top)

w = None
def create_Hub(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Hub(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Hub (w)
    hub_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Hub():
    global w
    w.destroy()
    w = None

class Hub:
    def __init__(self, my_socket, username, top=None):
        self.my_socket = my_socket
        self.username = username
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+615+242")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Hub")
        top.configure(background="#d9d9d9")

        self.Four_In_A_Row = tk.Button(top)
        self.Four_In_A_Row.place(relx=0.567, rely=0.4, height=24, width=107)
        self.Four_In_A_Row.configure(activebackground="#ececec")
        self.Four_In_A_Row.configure(activeforeground="#000000")
        self.Four_In_A_Row.configure(background="#d9d9d9")
        self.Four_In_A_Row.configure(cursor="hand2")
        self.Four_In_A_Row.configure(disabledforeground="#a3a3a3")
        self.Four_In_A_Row.configure(foreground="#000000")
        self.Four_In_A_Row.configure(highlightbackground="#d9d9d9")
        self.Four_In_A_Row.configure(highlightcolor="black")
        self.Four_In_A_Row.configure(pady="0")
        self.Four_In_A_Row.configure(text='''4 In A Row''')

        self.Welcome = tk.Label(top)
        self.Welcome.place(relx=0.433, rely=0.311, height=21, width=74)
        self.Welcome.configure(background="#d9d9d9")
        self.Welcome.configure(disabledforeground="#a3a3a3")
        self.Welcome.configure(foreground="#000000")
        self.Welcome.configure(text=f'''Welcome {username}''')

        self.Tic_Tac_Toe = tk.Button(top)
        self.Tic_Tac_Toe.place(relx=0.25, rely=0.4, height=24, width=107)
        self.Tic_Tac_Toe.configure(activebackground="#ececec")
        self.Tic_Tac_Toe.configure(activeforeground="#000000")
        self.Tic_Tac_Toe.configure(background="#d9d9d9")
        self.Tic_Tac_Toe.configure(cursor="hand2")
        self.Tic_Tac_Toe.configure(disabledforeground="#a3a3a3")
        self.Tic_Tac_Toe.configure(foreground="#000000")
        self.Tic_Tac_Toe.configure(highlightbackground="#d9d9d9")
        self.Tic_Tac_Toe.configure(highlightcolor="black")
        self.Tic_Tac_Toe.configure(pady="0")
        self.Tic_Tac_Toe.configure(text='''Tic Tac Toe''')
        self.Tic_Tac_Toe.configure(command=lambda: open_tictactoe_queue(top, self.username, self.my_socket))

if __name__ == '__main__':
    vp_start_gui()

